Running Random Card Test for council_room
number of asserts for council_room : 0 
test completed
File 'dominion.c'
Lines executed:26.33% of 581
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:int council_room_card(struct gameState *state, int currentPlayer, int handPos);
        -:   10:int feast_card( struct gameState *state, int currentPlayer, int choice1, int handPos);
        -:   11:int smithy_card(struct gameState *state, int currentPlayer, int handPos);
        -:   12:int village_card(struct gameState *state, int currentPlayer, int handPos);
        -:   13:int mine_card(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2);
        -:   14:
        -:   15:void my_assert(int test, char str[], int *numAssert);
        -:   16:
      616:   17:int compare(const void* a, const void* b) {
      616:   18:  if (*(int*)a > *(int*)b)
        4:   19:    return 1;
      612:   20:  if (*(int*)a < *(int*)b)
      163:   21:    return -1;
      449:   22:  return 0;
        -:   23:}
        -:   24:
    #####:   25:struct gameState* newGame() {
    #####:   26:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   27:  return g;
        -:   28:}
        -:   29:
    #####:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:		  int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
       10:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:		   struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;			
        -:   52:  //set up random number generator
       10:   53:  SelectStream(1);
       10:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
       10:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
       10:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
      110:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
     1100:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
     1000:   70:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:			{
    #####:   72:				return -1;
        -:   73:			}
        -:   74:        }
        -:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
       10:   82:  if (numPlayers == 2)
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 10;
        -:   85:    }
       10:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
        -:   89:    }
        -:   90:  else
        -:   91:    {
       10:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
       10:   96:  if (numPlayers == 2)
        -:   97:    {
    #####:   98:      state->supplyCount[estate] = 8;
    #####:   99:      state->supplyCount[duchy] = 8;
    #####:  100:      state->supplyCount[province] = 8;
        -:  101:    }
        -:  102:  else
        -:  103:    {
       10:  104:      state->supplyCount[estate] = 12;
       10:  105:      state->supplyCount[duchy] = 12;
       10:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:	//set number of Treasure cards
       10:  110:	state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  111:	state->supplyCount[silver] = 40;
       10:  112:	state->supplyCount[gold] = 30;
        -:  113:
        -:  114:	//set number of Kingdom cards
      210:  115:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  116:    {
     1650:  117:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  118:		{
     1550:  119:		if (kingdomCards[j] == i)
        -:  120:	    {
        -:  121:	      //check if card is a 'Victory' Kingdom card
      100:  122:			if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:			{
    #####:  124:				if (numPlayers == 2){ 
    #####:  125:					state->supplyCount[i] = 8; 
        -:  126:				}
    #####:  127:				else{ state->supplyCount[i] = 12; }
        -:  128:			}
        -:  129:			else
        -:  130:			{
      100:  131:				state->supplyCount[i] = 10;
        -:  132:			}
      100:  133:			break;
        -:  134:	    }
        -:  135:		else    //card is not in the set choosen for the game
        -:  136:	    {
     1450:  137:	      state->supplyCount[i] = -1;
        -:  138:	    }
        -:  139:	}
        -:  140:
        -:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
       50:  147:	for (i = 0; i < numPlayers; i++)
        -:  148:    {
       40:  149:		state->deckCount[i] = 0;
      160:  150:		for (j = 0; j < 3; j++)
        -:  151:		{
      120:  152:		  state->deck[i][j] = estate;
      120:  153:		  state->deckCount[i]++;
        -:  154:		}
      320:  155:		for (j = 3; j < 10; j++)
        -:  156:		{
      280:  157:			state->deck[i][j] = copper;
      280:  158:			state->deckCount[i]++;		
        -:  159:		}
        -:  160:    }
        -:  161:
        -:  162:	//shuffle player decks
       50:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{
       40:  165:		if ( shuffle(i, state) < 0 )
        -:  166:		{
    #####:  167:			return -1;
        -:  168:		}
        -:  169:    }
        -:  170:	
        -:  171:
        -:  172:	//draw player hands
       50:  173:	for (i = 0; i < numPlayers; i++)
        -:  174:    {
        -:  175:		//initialize hand size to zero
       40:  176:		state->handCount[i] = 0;
       40:  177:		state->discardCount[i] = 0;
        -:  178:		//draw 5 cards
       40:  179:		for (j = 0; j < 5; j++)
        -:  180:		{
        -:  181:			//drawCard(i, state);
        -:  182:		}
        -:  183:    }
        -:  184:  
        -:  185:  
        -:  186:  //set embargo tokens to 0 for all supply piles
      280:  187:	for (i = 0; i <= treasure_map; i++)
        -:  188:    {
      270:  189:      state->embargoTokens[i] = 0;
        -:  190:    }
        -:  191:
        -:  192:	
        -:  193:	//initialize first player's turn
       10:  194:	state->outpostPlayed = 0;
       10:  195:	state->phase = 0;
       10:  196:	state->numActions = 1;
       10:  197:	state->numBuys = 1;
       10:  198:	state->playedCardCount = 0;
       10:  199:	state->whoseTurn = 0;
       10:  200:	state->handCount[state->whoseTurn] = 0;
        -:  201:	//int it; move to top
        -:  202:
        -:  203:    
        -:  204:	//Moved draw cards to here, only drawing at the start of a turn
       60:  205:	for (it = 0; it < 5; it++){
       50:  206:		drawCard(state->whoseTurn, state);
        -:  207:	}
        -:  208:	
        -:  209:	
       10:  210:	updateCoins(state->whoseTurn, state, 0);
        -:  211:	
        -:  212:  
       10:  213:  return 0;
        -:  214:}
        -:  215:
       41:  216:int shuffle(int player, struct gameState *state) {
        -:  217: 
        -:  218:
        -:  219:  int newDeck[MAX_DECK];
       41:  220:  int newDeckPos = 0;
        -:  221:  int card;
        -:  222:  int i;
        -:  223:
       41:  224:  if (state->deckCount[player] < 1)
    #####:  225:    return -1;
       41:  226:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  227:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  228:
      491:  229:  while (state->deckCount[player] > 0) {
      409:  230:    card = floor(Random() * state->deckCount[player]);
      409:  231:    newDeck[newDeckPos] = state->deck[player][card];
      409:  232:    newDeckPos++;
     1308:  233:    for (i = card; i < state->deckCount[player]-1; i++) {
      899:  234:      state->deck[player][i] = state->deck[player][i+1];
        -:  235:    }
      409:  236:    state->deckCount[player]--;
        -:  237:  }
      450:  238:  for (i = 0; i < newDeckPos; i++) {
      409:  239:    state->deck[player][i] = newDeck[i];
      409:  240:    state->deckCount[player]++;
        -:  241:  }
        -:  242:
       41:  243:  return 0;
        -:  244:}
        -:  245:
       10:  246:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  247:{	
        -:  248:	int card;
       10:  249:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  250:
        -:  251:	//printf("start playCard\n");
        -:  252:	//check if it is the right phase
       10:  253:	if (state->phase != 0)
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //check if player has enough actions
       10:  259:	if ( state->numActions < 1 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:	
        -:  265:  //get card played
       10:  266:  card = handCard(handPos, state);
        -:  267:  
        -:  268:	
        -:  269:  //check if selected card is an action
       10:  270:	if ( card < adventurer || card > treasure_map )
        -:  271:    {
        -:  272:		//printf("card number: %i\n", card);
    #####:  273:		return -1;
        -:  274:    }
        -:  275:	
        -:  276:	
        -:  277:  //play card
       10:  278:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  279:    {
    #####:  280:		return -1;
        -:  281:    }
        -:  282:	
        -:  283:	
        -:  284:	//reduce number of actions
       10:  285:	state->numActions--;
        -:  286:
        -:  287:	//update coins (Treasure cards may be added with card draws)
       10:  288:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  289:	
       10:  290:	return 0;
        -:  291:}
        -:  292:
    #####:  293:int buyCard(int supplyPos, struct gameState *state) {
        -:  294:  int who;
    #####:  295:  if (DEBUG){
        -:  296:    printf("Entering buyCard...\n");
        -:  297:  }
        -:  298:
        -:  299:  // I don't know what to do about the phase thing.
        -:  300:
    #####:  301:  who = state->whoseTurn;
        -:  302:
    #####:  303:  if (state->numBuys < 1){
    #####:  304:    if (DEBUG)
        -:  305:      printf("You do not have any buys left\n");
    #####:  306:    return -1;
    #####:  307:  } else if (supplyCount(supplyPos, state) <1){
    #####:  308:    if (DEBUG)
        -:  309:      printf("There are not any of that type of card left\n");
    #####:  310:    return -1;
    #####:  311:  } else if (state->coins < getCost(supplyPos)){
    #####:  312:    if (DEBUG) 
        -:  313:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  314:    return -1;
        -:  315:  } else {
    #####:  316:    state->phase=1;
        -:  317:    //state->supplyCount[supplyPos]--;
    #####:  318:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  319:  
    #####:  320:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  321:    state->numBuys--;
    #####:  322:    if (DEBUG)
        -:  323:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  324:  }
        -:  325:
        -:  326:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  327:  //state->discardCount[who]++;
        -:  328:    
    #####:  329:  return 0;
        -:  330:}
        -:  331:
    #####:  332:int numHandCards(struct gameState *state) {
    #####:  333:  return state->handCount[ whoseTurn(state) ];
        -:  334:}
        -:  335:
       10:  336:int handCard(int handPos, struct gameState *state) {
       10:  337:	int currentPlayer = whoseTurn(state);
       10:  338:	return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
    #####:  341:int supplyCount(int card, struct gameState *state) {
    #####:  342:  return state->supplyCount[card];
        -:  343:}
        -:  344:
    #####:  345:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  346:  int i;
    #####:  347:  int count = 0;
        -:  348:
    #####:  349:  for (i = 0; i < state->deckCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->deck[player][i] == card) count++;
        -:  352:    }
        -:  353:
    #####:  354:  for (i = 0; i < state->handCount[player]; i++)
        -:  355:    {
    #####:  356:      if (state->hand[player][i] == card) count++;
        -:  357:    }
        -:  358:
    #####:  359:  for (i = 0; i < state->discardCount[player]; i++)
        -:  360:    {
    #####:  361:      if (state->discard[player][i] == card) count++;
        -:  362:    }
        -:  363:
    #####:  364:  return count;
        -:  365:}
        -:  366:
       20:  367:int whoseTurn(struct gameState *state) {
       20:  368:  return state->whoseTurn;
        -:  369:}
        -:  370:
    #####:  371:int endTurn(struct gameState *state) {
        -:  372:  int k;
        -:  373:  int i;
    #####:  374:  int currentPlayer = whoseTurn(state);
        -:  375:  
        -:  376:  //Discard hand
    #####:  377:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  378:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  379:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  380:  }
    #####:  381:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  382:    
        -:  383:  //Code for determining the player
    #####:  384:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  385:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  386:  }
        -:  387:  else{
    #####:  388:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  389:  }
        -:  390:
    #####:  391:  state->outpostPlayed = 0;
    #####:  392:  state->phase = 0;
    #####:  393:  state->numActions = 1;
    #####:  394:  state->coins = 0;
    #####:  395:  state->numBuys = 1;
    #####:  396:  state->playedCardCount = 0;
    #####:  397:  state->handCount[state->whoseTurn] = 0;
        -:  398:
        -:  399:  //int k; move to top
        -:  400:  //Next player draws hand
    #####:  401:  for (k = 0; k < 5; k++){
    #####:  402:    drawCard(state->whoseTurn, state);//Draw a card
        -:  403:  }
        -:  404:
        -:  405:  //Update money
    #####:  406:  updateCoins(state->whoseTurn, state , 0);
        -:  407:
    #####:  408:  return 0;
        -:  409:}
        -:  410:
    #####:  411:int isGameOver(struct gameState *state) {
        -:  412:  int i;
        -:  413:  int j;
        -:  414:	
        -:  415:  //if stack of Province cards is empty, the game ends
    #####:  416:  if (state->supplyCount[province] == 0)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
        -:  421:  //if three supply pile are at 0, the game ends
    #####:  422:  j = 0;
    #####:  423:  for (i = 0; i < 25; i++)
        -:  424:    {
    #####:  425:      if (state->supplyCount[i] == 0)
        -:  426:	{
    #####:  427:	  j++;
        -:  428:	}
        -:  429:    }
    #####:  430:  if ( j >= 3)
        -:  431:    {
    #####:  432:      return 1;
        -:  433:    }
        -:  434:
    #####:  435:  return 0;
        -:  436:}
        -:  437:
    #####:  438:int scoreFor (int player, struct gameState *state) {
        -:  439:
        -:  440:  int i;
    #####:  441:  int score = 0;
        -:  442:  //score from hand
    #####:  443:  for (i = 0; i < state->handCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
        -:  453:  //score from discard
    #####:  454:  for (i = 0; i < state->discardCount[player]; i++)
        -:  455:    {
    #####:  456:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  457:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  458:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  459:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  460:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  461:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  462:    }
        -:  463:
        -:  464:  //score from deck
    #####:  465:  for (i = 0; i < state->discardCount[player]; i++)
        -:  466:    {
    #####:  467:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  468:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  469:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  470:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  471:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  472:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  473:    }
        -:  474:
    #####:  475:  return score;
        -:  476:}
        -:  477:
    #####:  478:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  479:  int i;	
        -:  480:  int j;
        -:  481:  int highScore;
        -:  482:  int currentPlayer;
        -:  483:
        -:  484:  //get score for each player
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
        -:  487:      //set unused player scores to -9999
    #####:  488:      if (i >= state->numPlayers)
        -:  489:	{
    #####:  490:	  players[i] = -9999;
        -:  491:	}
        -:  492:      else
        -:  493:	{
    #####:  494:	  players[i] = scoreFor (i, state);
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if (players[i] > players[j])
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //add 1 to players who had less turns
    #####:  510:  currentPlayer = whoseTurn(state);
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore && i > currentPlayer )
        -:  514:	{
    #####:  515:	  players[i]++;
        -:  516:	}
        -:  517:    }
        -:  518:
        -:  519:  //find new highest score
    #####:  520:  j = 0;
    #####:  521:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  522:    {
    #####:  523:      if ( players[i] > players[j] )
        -:  524:	{
    #####:  525:	  j = i;
        -:  526:	}
        -:  527:    }
    #####:  528:  highScore = players[j];
        -:  529:
        -:  530:  //set winners in array to 1 and rest to 0
    #####:  531:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  532:    {
    #####:  533:      if ( players[i] == highScore )
        -:  534:	{
    #####:  535:	  players[i] = 1;
        -:  536:	}
        -:  537:      else
        -:  538:	{
    #####:  539:	  players[i] = 0;
        -:  540:	}
        -:  541:    }
        -:  542:
    #####:  543:  return 0;
        -:  544:}
        -:  545:
      120:  546:int drawCard(int player, struct gameState *state)
        -:  547:{	int count;
        -:  548:	int deckCounter;
        -:  549:	
      120:  550:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  551:		
        -:  552:		//Step 1 Shuffle the discard pile back into a deck
        -:  553:		int i;
        -:  554:		//Move discard to deck
       10:  555:		for (i = 0; i < state->discardCount[player];i++){
        9:  556:		  state->deck[player][i] = state->discard[player][i];
        9:  557:		  state->discard[player][i] = -1;
        -:  558:		}
        -:  559:
        1:  560:		state->deckCount[player] = state->discardCount[player];
        1:  561:		state->discardCount[player] = 0; //Reset discard
        -:  562:
        -:  563:		//Shufffle the deck
        1:  564:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  565:	   
        1:  566:		if (DEBUG){//Debug statements
        -:  567:		  printf("Deck count now: %d\n", state->deckCount[player]);
        -:  568:		} 
        -:  569:		
        1:  570:		state->discardCount[player] = 0;
        -:  571:
        -:  572:		//Step 2 Draw Card
        1:  573:		count = state->handCount[player];//Get current player's hand count
        -:  574:		
        1:  575:		if (DEBUG){//Debug statements
        -:  576:		  printf("Current hand count: %d\n", count);
        -:  577:		}
        -:  578:		
        1:  579:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  580:		
        -:  581:
        1:  582:		if (deckCounter == 0)
        -:  583:		{
    #####:  584:			return -1;
        -:  585:		}
        -:  586:
        1:  587:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  588:		state->deckCount[player]--;
        1:  589:		state->handCount[player]++;//Increment hand count
        -:  590:	}
        -:  591:
        -:  592:	else{
      119:  593:		int count = state->handCount[player];//Get current hand count for player
        -:  594:		int deckCounter;
        -:  595:		
      119:  596:		if (DEBUG){//Debug statements
        -:  597:		  printf("Current hand count: %d\n", count);
        -:  598:		}
        -:  599:
      119:  600:		deckCounter = state->deckCount[player];//Create holder for the deck count
      119:  601:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      119:  602:		state->deckCount[player]--;
      119:  603:		(state->handCount[player])++;//Increment hand count
        -:  604:		//printf("draw player handCount: %i \n", state->handCount[0]);
        -:  605:	}
        -:  606:	
        -:  607:
      120:  608:	return 0;
        -:  609:}
        -:  610:
    #####:  611:int getCost(int cardNumber)
        -:  612:{
    #####:  613:  switch( cardNumber ) 
        -:  614:    {
        -:  615:    case curse:
    #####:  616:      return 0;
        -:  617:    case estate:
    #####:  618:      return 2;
        -:  619:    case duchy:
    #####:  620:      return 5;
        -:  621:    case province:
    #####:  622:      return 8;
        -:  623:    case copper:
    #####:  624:      return 0;
        -:  625:    case silver:
    #####:  626:      return 3;
        -:  627:    case gold:
    #####:  628:      return 6;
        -:  629:    case adventurer:
    #####:  630:      return 6;
        -:  631:    case council_room:
    #####:  632:      return 5;
        -:  633:    case feast:
    #####:  634:      return 4;
        -:  635:    case gardens:
    #####:  636:      return 4;
        -:  637:    case mine:
    #####:  638:      return 5;
        -:  639:    case remodel:
    #####:  640:      return 4;
        -:  641:    case smithy:
    #####:  642:      return 4;
        -:  643:    case village:
    #####:  644:      return 3;
        -:  645:    case baron:
    #####:  646:      return 4;
        -:  647:    case great_hall:
    #####:  648:      return 3;
        -:  649:    case minion:
    #####:  650:      return 5;
        -:  651:    case steward:
    #####:  652:      return 3;
        -:  653:    case tribute:
    #####:  654:      return 5;
        -:  655:    case ambassador:
    #####:  656:      return 3;
        -:  657:    case cutpurse:
    #####:  658:      return 4;
        -:  659:    case embargo: 
    #####:  660:      return 2;
        -:  661:    case outpost:
    #####:  662:      return 5;
        -:  663:    case salvager:
    #####:  664:      return 4;
        -:  665:    case sea_hag:
    #####:  666:      return 4;
        -:  667:    case treasure_map:
    #####:  668:      return 4;
        -:  669:    }
        -:  670:	
    #####:  671:  return -1;
        -:  672:}
        -:  673:
       10:  674:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  675:{
        -:  676:  int i;
        -:  677:  int j;
        -:  678:  int k;
        -:  679:  int x;
        -:  680:  int index;
       10:  681:  int currentPlayer = whoseTurn(state);
       10:  682:  int nextPlayer = currentPlayer + 1;
        -:  683:
       10:  684:  int tributeRevealedCards[2] = {-1, -1};
        -:  685:  int temphand[MAX_HAND];// moved above the if statement
       10:  686:  int drawntreasure=0;
        -:  687:  int cardDrawn;
       10:  688:  int z = 0;// this is the counter for the temp hand
       10:  689:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  690:    nextPlayer = 0;
        -:  691:  }
        -:  692:  
        -:  693:	
        -:  694:  //uses switch to select card and perform actions
       10:  695:  switch( card ) 
        -:  696:    {
        -:  697:    case adventurer:
    #####:  698:		while(drawntreasure<2){
    #####:  699:			if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  700:				shuffle(currentPlayer, state);
        -:  701:			}
    #####:  702:			drawCard(currentPlayer, state);
    #####:  703:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  704:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  705:			{
        -:  706:				//printf("found treasure\n");
    #####:  707:				drawntreasure++;
        -:  708:			}
        -:  709:			else{
    #####:  710:				temphand[z]=cardDrawn;
    #####:  711:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  712:				z++;
        -:  713:			}
        -:  714:		}
    #####:  715:		while(z-1>=0){
    #####:  716:			state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  717:			z=z-1;
        -:  718:		}
    #####:  719:		return 0;
        -:  720:			
        -:  721:    case council_room:
        -:  722:	
       10:  723:		return council_room_card(state, currentPlayer, handPos);
        -:  724:	/*
        -:  725:      //+4 Cards
        -:  726:      for (i = 0; i < 4; i++)
        -:  727:	{
        -:  728:	  drawCard(currentPlayer, state);
        -:  729:	}
        -:  730:			
        -:  731:      //+1 Buy
        -:  732:      state->numBuys++;
        -:  733:			
        -:  734:      //Each other player draws a card
        -:  735:      for (i = 0; i < state->numPlayers; i++)
        -:  736:	{
        -:  737:	  if ( i != currentPlayer )
        -:  738:	    {
        -:  739:	      drawCard(i, state);
        -:  740:	    }
        -:  741:	}
        -:  742:			
        -:  743:      //put played card in played card pile
        -:  744:      discardCard(handPos, currentPlayer, state, 0);
        -:  745:			
        -:  746:      return 0;
        -:  747:	*/
        -:  748:	
        -:  749:    case feast:
        -:  750:		
    #####:  751:		return feast_card( state, currentPlayer, choice1, handPos);
        -:  752:	/*
        -:  753:      //gain card with cost up to 5
        -:  754:      //Backup hand
        -:  755:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  756:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  757:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  758:      }
        -:  759:      //Backup hand
        -:  760:
        -:  761:      //Update Coins for Buy
        -:  762:      updateCoins(currentPlayer, state, 5);
        -:  763:      x = 1;//Condition to loop on
        -:  764:      while( x == 1) {//Buy one card
        -:  765:	if (supplyCount(choice1, state) <= 0){
        -:  766:	  if (DEBUG)
        -:  767:	    printf("None of that card left, sorry!\n");
        -:  768:
        -:  769:	  if (DEBUG){
        -:  770:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  771:	  }
        -:  772:	}
        -:  773:	else if (state->coins < getCost(choice1)){
        -:  774:	  printf("That card is too expensive!\n");
        -:  775:
        -:  776:	  if (DEBUG){
        -:  777:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  778:	  }
        -:  779:	}
        -:  780:	else{
        -:  781:
        -:  782:	  if (DEBUG){
        -:  783:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  784:	  }
        -:  785:
        -:  786:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  787:	  x = 0;//No more buying cards
        -:  788:
        -:  789:	  if (DEBUG){
        -:  790:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  791:	  }
        -:  792:
        -:  793:	}
        -:  794:      }     
        -:  795:
        -:  796:      //Reset Hand
        -:  797:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  798:	state->hand[currentPlayer][i] = temphand[i];
        -:  799:	temphand[i] = -1;
        -:  800:      }
        -:  801:      //Reset Hand
        -:  802:     
        -:  803:      return 0;
        -:  804:	*/
        -:  805:	
        -:  806:    case gardens:
    #####:  807:      return -1;
        -:  808:			
        -:  809:    case mine:
        -:  810:	
    #####:  811:		return mine_card(state, currentPlayer, handPos, choice1, choice2);
        -:  812:	
        -:  813:	
        -:  814:	/*
        -:  815:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  816:
        -:  817:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  818:	{
        -:  819:	  return -1;
        -:  820:	}
        -:  821:		
        -:  822:      if (choice2 > treasure_map || choice2 < curse)
        -:  823:	{
        -:  824:	  return -1;
        -:  825:	}
        -:  826:
        -:  827:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  828:	{
        -:  829:	  return -1;
        -:  830:	}
        -:  831:
        -:  832:      gainCard(choice2, state, 2, currentPlayer);
        -:  833:
        -:  834:      //discard card from hand
        -:  835:      discardCard(handPos, currentPlayer, state, 0);
        -:  836:
        -:  837:      //discard trashed card
        -:  838:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  839:	{
        -:  840:	  if (state->hand[currentPlayer][i] == j)
        -:  841:	    {
        -:  842:	      discardCard(i, currentPlayer, state, 0);			
        -:  843:	      break;
        -:  844:	    }
        -:  845:	}
        -:  846:			
        -:  847:      return 0;
        -:  848:	*/
        -:  849:			
        -:  850:    case remodel:
    #####:  851:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  852:
    #####:  853:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:
    #####:  858:      gainCard(choice2, state, 0, currentPlayer);
        -:  859:
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
        -:  862:
        -:  863:      //discard trashed card
    #####:  864:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  865:	{
    #####:  866:	  if (state->hand[currentPlayer][i] == j)
        -:  867:	    {
    #####:  868:	      discardCard(i, currentPlayer, state, 0);			
    #####:  869:	      break;
        -:  870:	    }
        -:  871:	}
        -:  872:
        -:  873:
    #####:  874:      return 0;
        -:  875:	 
        -:  876:		
        -:  877:    case smithy:
        -:  878:	
    #####:  879:		return smithy_card(state, currentPlayer, handPos);
        -:  880:		
        -:  881:	/*
        -:  882:      //+3 Cards
        -:  883:      for (i = 0; i < 3; i++)
        -:  884:	{
        -:  885:	  drawCard(currentPlayer, state);
        -:  886:	}
        -:  887:			
        -:  888:      //discard card from hand
        -:  889:      discardCard(handPos, currentPlayer, state, 0);
        -:  890:      return 0;
        -:  891:	  
        -:  892:	  */
        -:  893:		
        -:  894:    case village:
        -:  895:	
    #####:  896:		return village_card(state, currentPlayer, handPos);
        -:  897:	
        -:  898:	/*
        -:  899:      //+1 Card
        -:  900:      drawCard(currentPlayer, state);
        -:  901:			
        -:  902:      //+2 Actions
        -:  903:      state->numActions = state->numActions + 2;
        -:  904:			
        -:  905:      //discard played card from hand
        -:  906:      discardCard(handPos, currentPlayer, state, 0);
        -:  907:      return 0;
        -:  908:	  */
        -:  909:		
        -:  910:    case baron:
        -:  911:		
        -:  912:		//printf("inside baron case\n");
        -:  913:		
    #####:  914:		state->numBuys++;//Increase buys by 1!
        -:  915:		
        -:  916:		//printf("after numBuys increase\n");
        -:  917:		
    #####:  918:		if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  919:			int p = 0;//Iterator for hand!
    #####:  920:			int card_not_discarded = 1;//Flag for discard set!
        -:  921:			
        -:  922:			//printf("before while\n");
        -:  923:			
    #####:  924:			while(card_not_discarded){
        -:  925:				
    #####:  926:				if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  927:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  928:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  929:					state->discardCount[currentPlayer]++;
    #####:  930:					for (;p < state->handCount[currentPlayer]; p++){
    #####:  931:					  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  932:					}
    #####:  933:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  934:					state->handCount[currentPlayer]--;
    #####:  935:					card_not_discarded = 0;//Exit the loop
        -:  936:				}
    #####:  937:				else if (p > state->handCount[currentPlayer]){
    #####:  938:					if(DEBUG) {
        -:  939:						printf("No estate cards in your hand, invalid choice\n");
        -:  940:						printf("Must gain an estate if there are any\n");
        -:  941:					}
    #####:  942:					if (supplyCount(estate, state) > 0){
    #####:  943:						gainCard(estate, state, 0, currentPlayer);
    #####:  944:						state->supplyCount[estate]--;//Decrement estates
    #####:  945:						if (supplyCount(estate, state) == 0){
    #####:  946:							isGameOver(state);
        -:  947:						}
        -:  948:					}
    #####:  949:					card_not_discarded = 0;//Exit the loop
        -:  950:				}
        -:  951:				
        -:  952:				else{
    #####:  953:					p++;//Next card
        -:  954:				}
        -:  955:			}
        -:  956:			
        -:  957:			//printf("after while\n");
        -:  958:			
        -:  959:		}
        -:  960:		else{
        -:  961:			
        -:  962:			//printf("in choice 2\n");
        -:  963:			
    #####:  964:			if (supplyCount(estate, state) > 0){
        -:  965:				
        -:  966:				//printf("in supplyCount if\n");
        -:  967:				
    #####:  968:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  969:				
        -:  970:				//printf("after gain card\n");
        -:  971:				
    #####:  972:				state->supplyCount[estate]--;//Decrement Estates
        -:  973:				
        -:  974:				//printf("after estate decrement\n");
        -:  975:				
    #####:  976:				if (supplyCount(estate, state) == 0){
    #####:  977:					isGameOver(state);
        -:  978:				}
        -:  979:			}
        -:  980:		}
        -:  981:			
        -:  982:		  
    #####:  983:		return 0;
        -:  984:			
        -:  985:    case great_hall:
        -:  986:      //+1 Card
    #####:  987:      drawCard(currentPlayer, state);
        -:  988:			
        -:  989:      //+1 Actions
    #####:  990:      state->numActions++;
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case minion:
        -:  997:      //+1 action
    #####:  998:      state->numActions++;
        -:  999:			
        -: 1000:      //discard card from hand
    #####: 1001:      discardCard(handPos, currentPlayer, state, 0);
        -: 1002:			
    #####: 1003:      if (choice1)		//+2 coins
        -: 1004:	{
    #####: 1005:	  state->coins = state->coins + 2;
        -: 1006:	}
        -: 1007:			
    #####: 1008:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1009:	{
        -: 1010:	  //discard hand
    #####: 1011:	  while(numHandCards(state) > 0)
        -: 1012:	    {
    #####: 1013:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //draw 4
    #####: 1017:	  for (i = 0; i < 4; i++)
        -: 1018:	    {
    #####: 1019:	      drawCard(currentPlayer, state);
        -: 1020:	    }
        -: 1021:				
        -: 1022:	  //other players discard hand and redraw if hand size > 4
    #####: 1023:	  for (i = 0; i < state->numPlayers; i++)
        -: 1024:	    {
    #####: 1025:	      if (i != currentPlayer)
        -: 1026:		{
    #####: 1027:		  if ( state->handCount[i] > 4 )
        -: 1028:		    {
        -: 1029:		      //discard hand
    #####: 1030:		      while( state->handCount[i] > 0 )
        -: 1031:			{
    #####: 1032:			  discardCard(handPos, i, state, 0);
        -: 1033:			}
        -: 1034:							
        -: 1035:		      //draw 4
    #####: 1036:		      for (j = 0; j < 4; j++)
        -: 1037:			{
    #####: 1038:			  drawCard(i, state);
        -: 1039:			}
        -: 1040:		    }
        -: 1041:		}
        -: 1042:	    }
        -: 1043:				
        -: 1044:	}
    #####: 1045:      return 0;
        -: 1046:		
        -: 1047:    case steward:
    #####: 1048:      if (choice1 == 1)
        -: 1049:	{
        -: 1050:	  //+2 cards
    #####: 1051:	  drawCard(currentPlayer, state);
    #####: 1052:	  drawCard(currentPlayer, state);
        -: 1053:	}
    #####: 1054:      else if (choice1 == 2)
        -: 1055:	{
        -: 1056:	  //+2 coins
    #####: 1057:	  state->coins = state->coins + 2;
        -: 1058:	}
        -: 1059:      else
        -: 1060:	{
        -: 1061:	  //trash 2 cards in hand
    #####: 1062:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1063:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1064:	}
        -: 1065:			
        -: 1066:      //discard card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case tribute:
    #####: 1071:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1072:	if (state->deckCount[nextPlayer] > 0){
    #####: 1073:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	  state->deckCount[nextPlayer]--;
        -: 1075:	}
    #####: 1076:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1077:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1078:	  state->discardCount[nextPlayer]--;
        -: 1079:	}
        -: 1080:	else{
        -: 1081:	  //No Card to Reveal
    #####: 1082:	  if (DEBUG){
        -: 1083:	    printf("No cards to reveal\n");
        -: 1084:	  }
        -: 1085:	}
        -: 1086:      }
        -: 1087:	    
        -: 1088:      else{
    #####: 1089:	if (state->deckCount[nextPlayer] == 0){
    #####: 1090:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1091:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1092:	    state->deckCount[nextPlayer]++;
    #####: 1093:	    state->discard[nextPlayer][i] = -1;
    #####: 1094:	    state->discardCount[nextPlayer]--;
        -: 1095:	  }
        -: 1096:			    
    #####: 1097:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1098:	} 
    #####: 1099:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1100:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1101:	state->deckCount[nextPlayer]--;
    #####: 1102:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1103:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1104:	state->deckCount[nextPlayer]--;
        -: 1105:      }    
        -: 1106:		       
    #####: 1107:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1108:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1109:	state->playedCardCount++;
    #####: 1110:	tributeRevealedCards[1] = -1;
        -: 1111:      }
        -: 1112:
    #####: 1113:      for (i = 0; i <= 2; i ++){
    #####: 1114:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1115:	  state->coins += 2;
        -: 1116:	}
        -: 1117:		    
    #####: 1118:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1119:	  drawCard(currentPlayer, state);
    #####: 1120:	  drawCard(currentPlayer, state);
        -: 1121:	}
        -: 1122:	else{//Action Card
    #####: 1123:	  state->numActions = state->numActions + 2;
        -: 1124:	}
        -: 1125:      }
        -: 1126:	    
    #####: 1127:      return 0;
        -: 1128:		
        -: 1129:    case ambassador:
    #####: 1130:      j = 0;		//used to check if player has enough cards to discard
        -: 1131:
    #####: 1132:      if (choice2 > 2 || choice2 < 0)
        -: 1133:	{
    #####: 1134:	  return -1;				
        -: 1135:	}
        -: 1136:
    #####: 1137:      if (choice1 == handPos)
        -: 1138:	{
    #####: 1139:	  return -1;
        -: 1140:	}
        -: 1141:
    #####: 1142:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1143:	{
    #####: 1144:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1145:	    {
    #####: 1146:	      j++;
        -: 1147:	    }
        -: 1148:	}
    #####: 1149:      if (j < choice2)
        -: 1150:	{
    #####: 1151:	  return -1;				
        -: 1152:	}
        -: 1153:
    #####: 1154:      if (DEBUG) 
        -: 1155:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1156:
        -: 1157:      //increase supply count for choosen card by amount being discarded
    #####: 1158:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1159:			
        -: 1160:      //each other player gains a copy of revealed card
    #####: 1161:      for (i = 0; i < state->numPlayers; i++)
        -: 1162:	{
    #####: 1163:	  if (i != currentPlayer)
        -: 1164:	    {
    #####: 1165:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1166:	    }
        -: 1167:	}
        -: 1168:
        -: 1169:      //discard played card from hand
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1171:
        -: 1172:      //trash copies of cards returned to supply
    #####: 1173:      for (j = 0; j < choice2; j++)
        -: 1174:	{
    #####: 1175:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1176:	    {
    #####: 1177:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1178:		{
    #####: 1179:		  discardCard(i, currentPlayer, state, 1);
    #####: 1180:		  break;
        -: 1181:		}
        -: 1182:	    }
        -: 1183:	}			
        -: 1184:
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case cutpurse:
        -: 1188:
    #####: 1189:      updateCoins(currentPlayer, state, 2);
    #####: 1190:      for (i = 0; i < state->numPlayers; i++)
        -: 1191:	{
    #####: 1192:	  if (i != currentPlayer)
        -: 1193:	    {
    #####: 1194:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1195:		{
    #####: 1196:		  if (state->hand[i][j] == copper)
        -: 1197:		    {
    #####: 1198:		      discardCard(j, i, state, 0);
    #####: 1199:		      break;
        -: 1200:		    }
    #####: 1201:		  if (j == state->handCount[i])
        -: 1202:		    {
    #####: 1203:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1204:			{
    #####: 1205:			  if (DEBUG)
        -: 1206:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1207:			}	
    #####: 1208:		      break;
        -: 1209:		    }		
        -: 1210:		}
        -: 1211:					
        -: 1212:	    }
        -: 1213:				
        -: 1214:	}				
        -: 1215:
        -: 1216:      //discard played card from hand
    #####: 1217:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1218:
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:		
        -: 1222:    case embargo: 
        -: 1223:      //+2 Coins
    #####: 1224:      state->coins = state->coins + 2;
        -: 1225:			
        -: 1226:      //see if selected pile is in play
    #####: 1227:      if ( state->supplyCount[choice1] == -1 )
        -: 1228:	{
    #####: 1229:	  return -1;
        -: 1230:	}
        -: 1231:			
        -: 1232:      //add embargo token to selected supply pile
    #####: 1233:      state->embargoTokens[choice1]++;
        -: 1234:			
        -: 1235:      //trash card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case outpost:
        -: 1240:      //set outpost flag
    #####: 1241:      state->outpostPlayed++;
        -: 1242:			
        -: 1243:      //discard card
    #####: 1244:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1245:      return 0;
        -: 1246:		
        -: 1247:    case salvager:
        -: 1248:      //+1 buy
    #####: 1249:      state->numBuys++;
        -: 1250:			
    #####: 1251:      if (choice1)
        -: 1252:	{
        -: 1253:	  //gain coins equal to trashed card
    #####: 1254:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1255:	  //trash card
    #####: 1256:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1257:	}
        -: 1258:			
        -: 1259:      //discard card
    #####: 1260:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1261:      return 0;
        -: 1262:		
        -: 1263:    case sea_hag:
    #####: 1264:      for (i = 0; i < state->numPlayers; i++){
    #####: 1265:	if (i != currentPlayer){
    #####: 1266:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1267:	  state->discardCount[i]++;
    #####: 1268:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1269:	}
        -: 1270:      }
    #####: 1271:      return 0;
        -: 1272:		
        -: 1273:    case treasure_map:
        -: 1274:      //search hand for another treasure_map
    #####: 1275:      index = -1;
    #####: 1276:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1277:	{
    #####: 1278:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1279:	    {
    #####: 1280:	      index = i;
    #####: 1281:	      break;
        -: 1282:	    }
        -: 1283:	}
    #####: 1284:      if (index > -1)
        -: 1285:	{
        -: 1286:	  //trash both treasure cards
    #####: 1287:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1288:	  discardCard(index, currentPlayer, state, 1);
        -: 1289:
        -: 1290:	  //gain 4 Gold cards
    #####: 1291:	  for (i = 0; i < 4; i++)
        -: 1292:	    {
    #####: 1293:	      gainCard(gold, state, 1, currentPlayer);
        -: 1294:	    }
        -: 1295:				
        -: 1296:	  //return success
    #####: 1297:	  return 1;
        -: 1298:	}
        -: 1299:			
        -: 1300:      //no second treasure_map found in hand
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
    #####: 1304:  return -1;
        -: 1305:}
        -: 1306:
       10: 1307:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1308:{
        -: 1309:	//printf("start discardCard\n");
        -: 1310:	
        -: 1311:  //if card is not trashed, added to Played pile 
       10: 1312:  if (trashFlag < 1)
        -: 1313:    {
        -: 1314:		//printf("inside trashFlag if\n");
        -: 1315:		//printf("playedCardCount: %i \n", state->playedCardCount);
        -: 1316:		//printf("currentPlayer: %i\n", currentPlayer);
        -: 1317:		//printf("handPos: %i \n", handPos);
        -: 1318:		
        -: 1319:      //add card to played pile
       10: 1320:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1321:      state->playedCardCount++;
        -: 1322:	  
        -: 1323:		//printf("after add card to played pile\n");
        -: 1324:    }
        -: 1325:	
        -: 1326:	//printf("after trash if\n");
        -: 1327:	
        -: 1328:  //set played card to -1
       10: 1329:  state->hand[currentPlayer][handPos] = -1;
        -: 1330:	
        -: 1331:	//printf("after set playcard to -1\n");
        -: 1332:	
        -: 1333:  //remove card from player's hand
       10: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
    #####: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
       10: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
        -: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
       10: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
       10: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
       10: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
       10: 1354:  return 0;
        -: 1355:}
        -: 1356:
    #####: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:  
        -: 1361:	
        -: 1362:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1363:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1364:  {
    #####: 1365:      return -1;
        -: 1366:  }
        -: 1367:	
        -: 1368:	
        -: 1369:  //added card for [whoseTurn] current player:
        -: 1370:  // toFlag = 0 : add to discard
        -: 1371:  // toFlag = 1 : add to deck
        -: 1372:  // toFlag = 2 : add to hand
        -: 1373:
    #####: 1374:	if (toFlag == 1)
        -: 1375:	{
        -: 1376:		
    #####: 1377:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1378:		state->deckCount[player]++;
        -: 1379:    }
    #####: 1380:	else if (toFlag == 2)
        -: 1381:    {
        -: 1382:		
    #####: 1383:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1384:      state->handCount[player]++;
        -: 1385:    }
        -: 1386:	else
        -: 1387:    {
        -: 1388:		
    #####: 1389:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1390:      state->discardCount[player]++;
        -: 1391:    }
        -: 1392:	
        -: 1393:	
        -: 1394:  //decrease number in supply pile
    #####: 1395:  state->supplyCount[supplyPos]--;
        -: 1396:	 
    #####: 1397:  return 0;
        -: 1398:}
        -: 1399:
       20: 1400:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1401:{
        -: 1402:  int i;
        -: 1403:	
        -: 1404:  
        -: 1405:  //reset coin count
       20: 1406:  state->coins = 0;
        -: 1407:
        -: 1408:  //add coins for each Treasure card in player's hand
      129: 1409:  for (i = 0; i < state->handCount[player]; i++)
        -: 1410:    {
      109: 1411:      if (state->hand[player][i] == copper)
        -: 1412:	{
       80: 1413:	  state->coins += 1;
        -: 1414:	}
       29: 1415:      else if (state->hand[player][i] == silver)
        -: 1416:	{
    #####: 1417:	  state->coins += 2;
        -: 1418:	}
       29: 1419:      else if (state->hand[player][i] == gold)
        -: 1420:	{
    #####: 1421:	  state->coins += 3;
        -: 1422:	}	
        -: 1423:    }	
        -: 1424:
        -: 1425:  //add bonus
       20: 1426:  state->coins += bonus;
        -: 1427:
       20: 1428:  return 0;
        -: 1429:}
        -: 1430:
        -: 1431:
        -: 1432:
        -: 1433:
       10: 1434:int council_room_card(struct gameState *state, int currentPlayer, int handPos)
        -: 1435:{
        -: 1436:	int i;
        -: 1437:	int j;
        -: 1438:	int k;
        -: 1439:	int x;
        -: 1440:	
        -: 1441:	 //+4 Cards
        -: 1442:		
       50: 1443:		for (i = 0; i < 4; i++)
        -: 1444:		{
       40: 1445:			drawCard(currentPlayer, state);
        -: 1446:		}
        -: 1447:			
        -: 1448:		//+1 Buy
       10: 1449:		state->numBuys++;
        -: 1450:			
        -: 1451:		//Each other player draws a card
       50: 1452:		for (i = 0; i < state->numPlayers; i++)
        -: 1453:		{
       40: 1454:			if ( i != currentPlayer )
        -: 1455:			{
       30: 1456:				drawCard(i, state);
        -: 1457:			}
        -: 1458:		}
        -: 1459:					
        -: 1460:		//put played card in played card pile
       10: 1461:		discardCard(handPos, currentPlayer, state, 0);
        -: 1462:			
        -: 1463:			
       10: 1464:		return 0;
        -: 1465:}
        -: 1466:
    #####: 1467:int feast_card( struct gameState *state, int currentPlayer, int choice1, int handPos)
        -: 1468:{
        -: 1469:	int i;
        -: 1470:	int j;
        -: 1471:	int k;
        -: 1472:	int x;
        -: 1473:	
        -: 1474:	 int temphand[MAX_HAND]; // moved above the if statement;
        -: 1475:	 
        -: 1476:	       //gain card with cost up to 5
        -: 1477:      //Backup hand
    #####: 1478:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1479:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1480:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1481:	}
        -: 1482:      //Backup hand
        -: 1483:
        -: 1484:    //Update Coins for Buy
    #####: 1485:    updateCoins(currentPlayer, state, 5);
    #####: 1486:    x = 1;//Condition to loop on
    #####: 1487:    while( x == 1) {//Buy one card
    #####: 1488:		if (supplyCount(choice1, state) <= 0){
    #####: 1489:			if (DEBUG)
        -: 1490:				printf("None of that card left, sorry!\n");
        -: 1491:
    #####: 1492:			if (DEBUG){
        -: 1493:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1494:			}
        -: 1495:		}
    #####: 1496:		else if (state->coins < getCost(choice1)){
    #####: 1497:			printf("That card is too expensive!\n");
        -: 1498:
    #####: 1499:			if (DEBUG){
        -: 1500:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1501:			}
        -: 1502:		}
        -: 1503:		else{
        -: 1504:
    #####: 1505:			if (DEBUG){
        -: 1506:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1507:			}
        -: 1508:
    #####: 1509:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1510:			x = 0;//No more buying cards
        -: 1511:
    #####: 1512:			if (DEBUG){
        -: 1513:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1514:			}
        -: 1515:
        -: 1516:		}
        -: 1517:	}     
        -: 1518:
        -: 1519:      //Reset Hand
    #####: 1520:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1521:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1522:		temphand[i] = -1;
        -: 1523:    }
        -: 1524:    //Reset Hand
        -: 1525:      			
    #####: 1526:    return 0;
        -: 1527:}
        -: 1528:	
    #####: 1529:int smithy_card(struct gameState *state, int currentPlayer, int handPos)
        -: 1530:{
        -: 1531:	int i;
        -: 1532:	int j;
        -: 1533:	int k;
        -: 1534:	int x;
        -: 1535:	
        -: 1536:	//printf("start smithy\n");
        -: 1537:	
        -: 1538:	//+3 Cards
    #####: 1539:     for (i = 0; i < 3; i++)
        -: 1540:	{
    #####: 1541:	  drawCard(currentPlayer, state);
        -: 1542:	}
        -: 1543:	
        -: 1544:	//printf("after draw\n");
        -: 1545:	
        -: 1546:	//printf("handPos: %i currentPlayer: %i\n", handPos, currentPlayer);
        -: 1547:	
        -: 1548:     //discard card from hand
    #####: 1549:    discardCard(handPos, currentPlayer, state, 0);
        -: 1550:	
        -: 1551:	//printf("after discard\n");
        -: 1552:	
    #####: 1553:      return 0;
        -: 1554:}
        -: 1555:
        -: 1556:
    #####: 1557:int village_card(struct gameState *state, int currentPlayer, int handPos)
        -: 1558:{
        -: 1559:	int i;
        -: 1560:	int j;
        -: 1561:	int k;
        -: 1562:	int x;
        -: 1563:	
        -: 1564:	//+1 Card
    #####: 1565:    drawCard(currentPlayer, state);
        -: 1566:	
        -: 1567:	  
        -: 1568:			
        -: 1569:      //+2 Actions
    #####: 1570:      state->numActions = state->numActions;
        -: 1571:			
        -: 1572:      //discard played card from hand
    #####: 1573:      discardCard(handPos, currentPlayer, state, 0);
        -: 1574:	  
    #####: 1575:    return 0;
        -: 1576:}
        -: 1577:
    #####: 1578:int mine_card(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1579:{
        -: 1580:	int i;
        -: 1581:	int j;
        -: 1582:	int k;
        -: 1583:	int x;
    #####: 1584:	  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1585:
    #####: 1586:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1587:	{
    #####: 1588:	  return -1;
        -: 1589:	}
        -: 1590:		
    #####: 1591:      if (choice2 > treasure_map || choice2 < curse)
        -: 1592:	{
    #####: 1593:	  return -1;
        -: 1594:	}
        -: 1595:
    #####: 1596:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1597:	{
    #####: 1598:	  return -1;
        -: 1599:	}
        -: 1600:
    #####: 1601:      gainCard(choice2, state, 2, currentPlayer-1);
        -: 1602:
        -: 1603:      //discard card from hand
    #####: 1604:      discardCard(handPos, currentPlayer, state, 0);
        -: 1605:
        -: 1606:      //discard trashed card
    #####: 1607:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1608:	{
    #####: 1609:	  if (state->hand[currentPlayer][i] == j)
        -: 1610:	    {
    #####: 1611:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1612:	      break;
        -: 1613:	    }
        -: 1614:	}
        -: 1615:	
    #####: 1616:	return 0;
        -: 1617:}
        -: 1618:
       60: 1619:void my_assert(int test, char str[], int *numAssert)
        -: 1620:{
        -: 1621:	//printf("assert test: %d\n", test);
       60: 1622:	if(!test)
        -: 1623:	{
    #####: 1624:		printf("%s\n", str);
    #####: 1625:		(*numAssert)++;
        -: 1626:	}
       60: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:
        -: 1631://end of dominion.c
        -: 1632:
